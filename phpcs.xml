<?xml version="1.0"?>
<ruleset name="WordPress Coding Standards">
	<description>Coding standards</description>

	<file>.</file>

	<!-- Show progress, show the error codes for each message (source). -->
	<arg value="ps" />

	<!-- Strip the filepaths in reports down to the relevant bit. -->
	<arg name="basepath" value="./" />

	<!-- Check up to 8 files simultaneously. -->
	<arg name="parallel" value="8" />

	<!-- Configs -->
	<config name="minimum_supported_wp_version" value="5.2" />
	<config name="testVersion" value="7.4-" />

	<!-- Rules -->
	<!--
	#############################################################################
	Handbook: Whitespace - Space Usage.
	Ref: https://developer.wordpress.org/coding-standards/wordpress-coding-standards/php/#space-usage
	#############################################################################
	-->
	<!-- Covers rule: Always put spaces after commas... -->
	<!-- No space before a comma and one space or a new line after. -->
	<rule ref="Universal.WhiteSpace.CommaSpacing"/>
	<rule ref="Universal.WhiteSpace.CommaSpacing.TooMuchSpaceAfterCommaBeforeTrailingComment">
		<!-- Alignment of trailing comments is allowed. -->
		<severity>0</severity>
	</rule>
	<!-- Comma spacing in function declarations, including closure use statements, is handled by the
		 Squiz.Functions.FunctionDeclarationArgumentSpacing sniff. -->
	<rule ref="Universal.WhiteSpace.CommaSpacing.SpaceBeforeInFunctionDeclaration">
		<severity>0</severity>
	</rule>
	<rule ref="Universal.WhiteSpace.CommaSpacing.TooMuchSpaceAfterInFunctionDeclaration">
		<severity>0</severity>
	</rule>
	<rule ref="Universal.WhiteSpace.CommaSpacing.NoSpaceAfterInFunctionDeclaration">
		<severity>0</severity>
	</rule>
	<rule ref="Universal.WhiteSpace.CommaSpacing.SpaceBeforeInClosureUse">
		<severity>0</severity>
	</rule>
	<rule ref="Universal.WhiteSpace.CommaSpacing.TooMuchSpaceAfterInClosureUse">
		<severity>0</severity>
	</rule>
	<rule ref="Universal.WhiteSpace.CommaSpacing.NoSpaceAfterInClosureUse">
		<severity>0</severity>
	</rule>
	<!-- Comma spacing in function calls is handled by the Generic.Functions.FunctionCallArgumentSpacing sniff. -->
	<rule ref="Universal.WhiteSpace.CommaSpacing.SpaceBeforeInFunctionCall">
		<severity>0</severity>
	</rule>
	<rule ref="Universal.WhiteSpace.CommaSpacing.TooMuchSpaceAfterInFunctionCall">
		<severity>0</severity>
	</rule>
	<rule ref="Universal.WhiteSpace.CommaSpacing.NoSpaceAfterInFunctionCall">
		<severity>0</severity>
	</rule>

	<!-- Covers rule: Always put spaces ... on both sides of logical,
		 arithmetic, comparison, string and assignment operators. -->
	<rule ref="WordPress.WhiteSpace.OperatorSpacing"/>
	<rule ref="Squiz.Strings.ConcatenationSpacing">
		<properties>
			<property name="spacing" value="1"/>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule>

	<!-- Covers rule: Put spaces on both sides of the opening and closing parentheses of control structure blocks. -->
	<rule ref="WordPress.WhiteSpace.ControlStructureSpacing"/>

	<!-- Covers rule: Define a function like so: function my_function( $param1 = 'foo', $param2 = 'bar' ) { -->
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
		<properties>
			<property name="checkClosures" value="false"/>
		</properties>
	</rule>
	<!-- Prevent duplicate message. This is now checked by the Squiz.Functions.MultiLineFunctionDeclaration sniff. -->
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie.ContentAfterBrace">
		<severity>0</severity>
	</rule>

	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>
	<!-- WP demands brace on same line, not on the next line. Silence errors related to "brace on same line". -->
	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration.BraceSpacing">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration.BraceIndent">
		<severity>0</severity>
	</rule>

	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1"/>
			<property name="requiredSpacesAfterOpen" value="1"/>
			<property name="requiredSpacesBeforeClose" value="1"/>
		</properties>
	</rule>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterVariadic">
		<severity>0</severity>
	</rule>

	<!-- Covers rule: Call a function, like so: my_function( $param1, func_param( $param2 ) ); -->
	<rule ref="PEAR.Functions.FunctionCallSignature">
		<properties>
			<property name="requiredSpacesAfterOpen" value="1"/>
			<property name="requiredSpacesBeforeClose" value="1"/>

			<!-- ... and for multi-line function calls, there should only be one parameter per line. -->
			<property name="allowMultipleArguments" value="false"/>
		</properties>
	</rule>

	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

	<!-- Rule: Perform logical comparisons, like so: if ( ! $foo ) { -->

	<!-- Covers rule: Type casts must be lowercase. Always prefer the short form
		 of type casts, (int) instead of (integer) and (bool) rather than (boolean).
		 For float casts use (float), not (real) which is deprecated in PHP 7.4, and removed in PHP 8. -->
	<rule ref="Generic.Formatting.SpaceAfterCast"/>
	<rule ref="Squiz.WhiteSpace.CastSpacing"/>
	<rule ref="WordPress.WhiteSpace.CastStructureSpacing"/>
	<rule ref="WordPress.PHP.TypeCasts"/>
	<rule ref="PSR12.Keywords.ShortFormTypeKeywords"/>
	<!-- N.B.: This sniff also checks the case of (parameter/return) type declarations, not just type casts. -->
	<rule ref="Generic.PHP.LowerCaseType"/>

	<!-- Covers rule: ... array items, only include a space around the index if it is a variable. -->
	<rule ref="WordPress.Arrays.ArrayKeySpacingRestrictions"/>

	<!-- Covers rule: In a switch block, there must be no space between the case condition and the colon. -->
	<!-- Covered by the PSR2.ControlStructures.SwitchDeclaration sniff. -->

	<!-- Covers rule: Unless otherwise specified, parentheses should have spaces inside them. -->
	<rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
		<properties>
			<property name="spacing" value="1"/>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule>

	<!-- Covers rule: When using increment or decrement operators, there should be
		 no spaces between the operator and the variable it applies to. -->
	<rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>

	<!-- Implied through the examples: Object operators should not have whitespace around them unless they are multi-line. -->
	<rule ref="WordPress.WhiteSpace.ObjectOperatorSpacing">
		<properties>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule>

	<!-- Implied through the examples: align the assignment operator in a block of assignments. -->
	<rule ref="Generic.Formatting.MultipleStatementAlignment">
		<properties>
			<property name="maxPadding" value="40"/>
		</properties>
	</rule>

	<!-- Implied through the examples: align the double arrows. -->
	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<property name="maxColumn" value="60"/>
		</properties>
	</rule>

	<!--
	#############################################################################
	Handbook: General - Single and Double Quotes.
	Ref: https://developer.wordpress.org/coding-standards/wordpress-coding-standards/php/#single-and-double-quotes
	#############################################################################
	-->
	<!-- Covers rule: Use single and double quotes when appropriate.
		 If you're not evaluating anything in the string, use single quotes. -->
	<rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired"/>
</ruleset>
